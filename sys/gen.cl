;;;; gen.cl
(in-package #:cl-user)

(use-package :util.string)

(defun collect-extern-variables ()
  (let (collected)
    (dolist (form *manifest-forms*)
      (when (eq 'extern (car form))
        (destructuring-bind (_ sym ftype) form
          (when (match-re "^_?Py" (symbol-name sym) :case-fold nil)
            (push (list (symbol-name sym)
                        :pointer-p (if (and (consp ftype) (eq :pointer (first ftype))) t nil))
                  collected)))))
    collected))

(defun translate-foreign-type (x &key ret)
  (etypecase x
    (keyword (case x
               ((:function-pointer :pointer) :foreign-address)
               (:char '(:char fixnum))
               (t x)))
    (symbol (case x
              (size_t :unsigned-nat)
              (int64_t :long-long)
              (t x)))
    (list (case (first x)
            (:pointer (case (second x)
                        ;; see https://peps.python.org/pep-0384/#structures
                        ((PyObject PyVarObject PyMethodDef PyMemberDef PyGetSetDef PyModuleDef_Base PyModuleDef PyStructSequence_Field PyStructSequence_Desc PyType_Slot PyType_Spec)
                         (if* ret
                            then `((* ,(second x)) t foreign-python-funcall-converter/returning)
                            else `((* ,(second x)))))
                        (:char '((* :char) #+32bit (unsigned-byte 32) #+64bit (unsigned-byte 64))) ; char*
                        (size_t '((* :unsigned-nat)))
                        (int64_t '((* :long-long)))
                        (t :foreign-address)))
            (t (error "don't know how to translate compound type ~s" x))))))

(defun translate-foreign-function (form)
  (destructuring-bind (_ name args return-type &optional variadic-p) form
    (flet ((to-translate-p ()
             (and (not variadic-p)
                  (not (find name '("PyBytes_FromFormatV" "PyUnicode_FromFormatV" "PyErr_FormatV" "PyOS_vsnprintf")
                             :test 'string=))
                  (match-re "^Py" name :case-fold nil)))
           (translate-arg (arg)
             (when (= 1 (length arg))   ; anonymous argument
               (setq arg (cons nil arg)))
             (let ((ftype (translate-foreign-type (second arg))))
               (if* (listp ftype)
                  then (cons (first arg) ftype)
                  else (list (first arg) ftype)))))
      (when (to-translate-p)            ; foreign definitions filter
        `(ff:def-foreign-call ,(intern name) ,(if args (mapcar #'translate-arg args) '(:void))
           :strings-convert nil
           :returning ,(translate-foreign-type return-type :ret t)
           :allow-gc :always
           :call-direct ,(not (null args))
           :arg-checking t)))))

(defun write-form (form)
  (when form
    (pprint form *standard-output*)
    (terpri *standard-output*)))

(defun main ()
  ;; header (comments and package declarations)
  (format *standard-output* ";;;; capi.cl~%")
  (format *standard-output* ";;;; this file is automatically generated, DO NOT modify~%")
  (dolist (form '((in-package #:pycl.sys)
                  (eval-when (:compile-toplevel)
                    (declaim (optimize speed (safety 0) (space 0))))))
    (write-form form))
  ;; extern variables
  ;; example input:   (extern PyExc_SystemExit (:pointer PyObject))
  ;; expected output: ("PyExc_SystemExit" :pointer-p t)
  ;; they shall be processed after libpython has been loaded
  (write-form `(defconstant +libpython-extern-variables+
                 ',(collect-extern-variables)))
  ;; foreign functions
  (dolist (form *manifest-forms*)
    (write-form
     (when (eq 'function (car form))
       (translate-foreign-function form))))
  ;; exports
  (write-form '(eval-when (:compile-toplevel :load-toplevel :execute)
                (do-symbols (sym)
                  (when (match-re "^Py" (symbol-name sym) :case-fold nil)
                    (export sym))))))

(eval-when (:load-toplevel :execute)
  (defparameter *manifest-forms*
    (with-open-file (in (string+ (directory-namestring *load-pathname*) "libpython.binding.sexp"))
      (do ((all-forms)
           (form (read in nil nil) (read in nil nil)))
          ((null form) (nreverse all-forms))
        (push form all-forms))))
  (main))
