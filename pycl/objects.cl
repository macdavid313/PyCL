;;;; objects.cl
(in-package #:pycl)

(defgeneric @pyobject (thing)
  (:documentation "Default method for converting a lisp value to a PyObject pointer")
  (:method ((fp foreign-pointer)) fp))

(defgeneric from-pyobject (ob)
  (:documentation "Default method for converting a PyObject pointer to a lisp value"))

(defun @pynone ()
  (make-pyobject (pyglobalptr 'Py_None)))

(defun @pybool (x)
  (make-pyobject (pyglobalptr (if x 'Py_True 'Py_False))))

(defmethod @pylong ((x real))
  (PyLong_FromDouble (float x 0d0)))

(defmethod @pylong ((x integer))
  (if* (typep x 'signed-byte)
     then (PyLong_FromLongLong x)
     else (PyLong_FromUnsignedLongLong x)))

(defmethod @pyfloat ((x real))
  (PyFloat_FromDouble (float (the real x) 0d0)))

(defmethod @pycomplex ((x complex))
  (PyComplex_FromDoubles (float (realpart x) 0d0)
                         (float (imagpart x) 0d0)))

(defun make-pybytes-unsafe! (x)
  (with-native-string (str x :native-length-var len :external-format :utf-8)
    (PyBytes_FromStringAndSize str len)))

(defmethod @pybytes ((x list))
  (make-pybytes-unsafe! (coerce x '(simple-array (unsigned-byte 8) *))))

(defmethod @pybytes ((x array))
  (check-type x (array (unsigned-byte 8) (*)))
  (make-pybytes-unsafe! x))

(defmethod @pyunicode ((x string))
  (with-native-string (cstr x :native-length-var len
                              :external-format :utf-8)
    (PyUnicode_FromStringAndSize cstr len)))

(defun make-pylist-unsafe! (lst)
  (let ((ob (PyList_New (length lst))))
    (check-type ob pyobject)
    (loop for item in lst
          for idx from 0
          do (PyList_SetItem ob idx (pystealref item)))
    ob))

(defmethod @pylist ((x list))
  (with-stack-list (ob-stack)
    (handler-case (dolist (elm x)
                    (push (@pyobject elm) ob-stack))
      (error (e)
        (dolist (ob ob-stack)
          (pydecref ob))
        (error e)))
    (make-pylist-unsafe! (nreverse ob-stack))))

(defmethod @pylist ((x array))
  (let (ob-stack)
    (handler-case (loop for idx from 0 below (length x)
                        do (push (@pyobject (aref x idx)) ob-stack))
      (error (e)
        (dolist (ob ob-stack)
          (pydecref ob))
        (error e)))
    (make-pylist-unsafe! (nreverse ob-stack))))

(defmethod @pytuple (x)
  (etypecase x
    ((or list array)
     (let ((ob_list (@pylist x))
           ob_tuple)
       (setq ob_tuple (PySequence_Tuple ob_list))
       (prog1 ob_tuple
         (pydecref ob_list))))))

(defun make-pydict-unsafe! (ht)
  (let ((ob (PyDict_New)))
    (check-type ob pyobject)
    (flet ((iter (k v)
             (with-native-string (str k :external-format :utf-8)
               (PyDict_SetItemString ob str v))))
      (maphash #'iter ht))
    ob))

(defmethod @pydict ((x hash-table))
  (with-stack-list (ob-stack)
    (let ((ht (make-hash-table :test 'string= :size (hash-table-size x))))
      (flet ((iter (k v)
               (setq v (@pyobject v))
               (push v ob-stack)
               (setf (gethash (string+ k) ht) v)))
        (handler-case (maphash #'iter x)
          (error (e)
            (dolist (ob ob-stack)
              (pydecref ob))
            (clrhash ht)
            (error e))))
      (make-pydict-unsafe! ht))))

(defmethod @pydict ((x list))
  (with-stack-list (ob-stack)
    (let ((ht (make-hash-table :test 'string= :size (length x))))
      (handler-case (dolist (pair x)
                      (destructuring-bind (k . v) pair
                        (setf (gethash (string+ k) ht) (@pyobject v))))
        (error (e)
          (dolist (ob ob-stack)
            (pydecref ob))
          (clrhash ht)
          (error e)))
      (make-pydict-unsafe! ht))))

(defmethod @pyobject ((x (eql nil)))  (@pynone))
(defmethod @pyobject ((x symbol))     (@pyunicode (symbol-name x)))
(defmethod @pyobject ((x integer))    (@pylong x))
(defmethod @pyobject ((x ratio))      (@pyfloat x))
(defmethod @pyobject ((x float))      (@pyfloat x))
(defmethod @pyobject ((x complex))    (@pycomplex x))
(defmethod @pyobject ((x list))       (@pylist x))
(defmethod @pyobject ((x array))      (@pylist x))
(defmethod @pyobject ((x string))     (@pyunicode x))
(defmethod @pyobject ((x hash-table)) (@pydict x))

;;; protocols
(defun pytype-of (ob)
  (check-type ob pyobject-pointer)
  (let ((ob_type (PyObject_Type ob)))
    (if* (pynull ob_type)
       then (pyerror)
       else (unwind-protect (pyglobalptr ob_type)
              (pydecref ob_type)))))

(defun pytypep (ob type)
  (check-type ob pyobject)
  (assert (pyglobalptr type))
  (let ((res (PyObject_IsInstance ob (pyglobalptr type))))
    (declare (type (integer -1 1) res))
    (if* (= res -1)
       then (pyerror)
       else (= res 1))))

(defun pylen (ob)
  (check-type ob pyobject)
  (PyObject_Length ob))

(defun pystr (ob)
  (let ((ob_unicode (PyObject_Str ob)))
    (if* (pynull ob_unicode)
       then (pyerror)
       else (unwind-protect (values (native-to-string (pyunicode-to-native ob_unicode)
                                                      :external-format :utf-8))
              (pydecref ob_unicode)))))

(defun pyrepr (ob)
  (let ((ob_unicode (PyObject_Repr ob)))
    (if* (pynull ob_unicode)
       then (pyerror)
       else (unwind-protect (values (native-to-string (pyunicode-to-native ob_unicode)
                                                      :external-format :utf-8))
              (pydecref ob_unicode)))))

(defun pyhasattr (ob attr)
  (check-type ob pyobject)
  (check-type attr string)
  (with-native-string (str attr :external-format :utf-8)
    (= 1 (PyObject_HasAttrString ob str))))

(defun pyattr-get (ob attr)
  (check-type ob pyobject)
  (check-type attr string)
  (with-native-string (str attr :external-format :utf-8)
    (values (pycheckn (PyObject_GetAttrString ob str))
            (= 1 (PyObject_HasAttrString ob str)))))

(defun pyattr-set (ob attr new-val)
  (check-type ob pyobject)
  (check-type attr string)
  (setq new-val (@pyobject new-val))
  (with-native-string (attr attr :external-format :utf-8)
    (if* (and (pynull new-val) (= 1 (PyObject_HasAttrString ob attr)))
       then (PyObject_DelAttrString ob attr)
       else (PyObject_SetAttrString ob attr new-val))))

(defun check-args/pysequence-getter-setter (ob-seq idx)
  (check-type ob-seq pyobject)
  (assert (= 1 (PySequence_Check ob-seq)))
  (check-type idx (unsigned-byte #+32bit 32 #+64bit 64))
  (assert (< idx (PyObject_Size ob-seq))))

(defun pysequence-get (ob-seq idx)
  (check-args/pysequence-getter-setter ob-seq idx)
  (pycheckn
   (cond ((pytypep ob-seq 'PyTuple_Type) (PyTuple_GetItem ob-seq idx))
         ((pytypep ob-seq 'PyList_Type) (PyList_GetItem ob-seq idx))
         (t (PySequence_GetItem ob-seq idx)))))

(defun pysequence-set (ob-seq idx new-val)
  (check-args/pysequence-getter-setter ob-seq idx)
  (setq new-val (@pyobject new-val))
  (pycheckz
   (cond ((pytypep ob-seq 'PyTuple_Type) (PyTuple_SetItem ob-seq idx (pystealref new-val)))
         ((pytypep ob-seq 'PyList_Type) (PyList_SetItem ob-seq idx (pystealref new-val)))
         (t (if* (pynull new-val)
               then (PySequence_DelItem ob-seq idx)
               else (PySequence_SetItem ob-seq idx new-val))))))

(defun pyhaskey (ob key)
  (check-type ob pyobject)
  (check-type key string)
  (assert (= 1 (PyMapping_Check ob)))
  (with-native-string (str key :external-format :utf-8)
    (= 1 (PyMapping_HasKeyString ob str))))

(defun pymapping-get (ob key)
  (check-type ob pyobject)
  (check-type key string)
  (assert (= 1 (PyMapping_Check ob)))
  (with-native-string (str key :external-format :utf-8)
    (values (pycheckn (PyMapping_GetItemString ob str))
            (= 1 (PyMapping_HasKeyString ob str)))))

(defun pymapping-set (ob key new-val)
  (check-type ob pyobject)
  (check-type key string)
  (assert (= 1 (PyMapping_Check ob)))
  (setq new-val (@pyobject new-val))
  (with-native-string (str key :external-format :utf-8)
    (= 0 (pycheckz (PyMapping_SetItemString ob str new-val)))))

(defun pygetf (ob &key (attr nil attr-p)
                    (key nil key-p))
  (cond (attr-p
         (assert (null key-p))
         (pyattr-get ob attr))
        (key-p
         (assert (null attr-p))
         (pymapping-get ob key))
        (t (error "must be supplying either :attr or :key"))))
